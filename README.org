#+title: Clojure Project

| [[https://bigv-portfolio.goatcounter.com/counter/bigv-portfolio//.html?no_branding=true&style=div%7Bbackground%3Ablack%3Bcolor%3Asandybrown%3Bborder%3Anone%7D%23gcvc-for%2C%23gcvc-views%7Bcolor%3Asandybrown%3B%7D][Home page views]] | [[https://bigv-portfolio.goatcounter.com/counter/bigv-portfolio/gallery/.html?no_branding=true&style=div%7Bbackground%3Ablack%3Bcolor%3Asandybrown%3Bborder%3Anone%7D%23gcvc-for%2C%23gcvc-views%7Bcolor%3Asandybrown%3B%7D][Gallery page views]] |

Build of a static website based on =clojure=:
- =.html=: [[file:src/clj/][=clojure=]] to generate the static stuff, evaluating the [[file:data/][=csv=]] data and baking it into the window property
- =.js=: [[file:src/cljs/][=clojurescript=]] for stuff like gallery interactivity, that will use the =#id= tags in the html to manipulate state and properties
= =.css=: [[file:src/css/input.css][tailwind]] to inject nice css props and build a minified css file
= [[file:resources/public/assets/][Assets]]: some will be served by the site, other [[file:src/python/gsync.py][fetched from google]]

The build script populate the [[file:resources/public/][public]] folder that can be served statically

* Running
1. Install node and python dependencies
#+begin_src shell
npm i && python install -r
#+end_src

#+begin_src shell
npm i # initiall install
npm run dev # for development build with watching
npm run build # for production build
npm run publish # to push to github pages
#+end_src

* Generating hashes for external js
#+begin_src shell
curl -sSL https://cdn.jsdelivr.net/npm/chart.js@4.5.0/dist/chart.umd.min.js \
  | openssl dgst -sha384 -binary \
  | openssl base64 -A \
  | awk '{print "sha384-" $0}'
#+end_src
* Config
** =.clj=
** =.cljs=
As the cljs files are compiled and minified with the =cljs= compiler, variable names can be mangled.

To prevent this, ensure that you use =aget= instead of =-.PROP= to access fields

#+begin_src clojure
-                   (let [idx   (js/parseInt (.-dataIndex item))
+                   (let [idx   (js/parseInt (aget item "dataIndex"))
#+end_src

*** How to build
- The =cljs= compiler does a good job at slimming the build and can be used as is.
- I looked at using it to create a temp output and then using =rollup= to bundle and trim further: commit 2917629
- It seemed to be worse as per table below as it did not group common things
| =cljs= + tree-shakeng =chart.js= | =gallery.js=       | 2.56k |
|                                  | =landing.js=       | 167k  |
|                                  | =cljs_base.js=     | 99.5k |
|----------------------------------+--------------------+-------|
| =cljs=                           | =gallery.js=       | 2.55k |
|                                  | =landing.js=       | 7.46k |
|                                  | =cljs_base.js=     | 98.7k |
|                                  | =chart.umd.min.js= | 203k  |
|----------------------------------+--------------------+-------|
| =cljs + rollup=                  | =gallery.js=       | 92.9k |
|                                  | =landing.js=       | 103k  |
|                                  | =chart.umd.min.js= | 203k  |

* TODO
- [X] Need to embed the graph - no toggling to begin with
- [X] Build for landing an gallery pages, preferable through a slim config file
- [X] Separating out common element (data) into cljc files that can be consumed by both sources
- [X] Rework the build pipeline for =cljs= so that it builds the relevant files into relevant =js= files
- [X] Tree shake =charts.js= and make a simple build script
- [X] Common elements that share static config
- [X] Correctly setting the base path or urls
- [ ] Clean up the code into modules
